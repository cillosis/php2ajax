<html>
	
	<head>
		<title>php2ajax Class Library</title>
		<style>
			
			body {
				width: 80%;
				margin-left: auto;
				margin-right: auto;
			}
			
			.description {
				border: 2px solid #000;
				border-radius: 10px 10px 10px 10px;
				-moz-border-radius: 10px 10px 10px 10px;
				-webkit-border-radius: 10px 10px 10px 10px;
				background-color: #DFDFDF;
				padding: 10px;
				margin-bottom: 10px;
			}
			
			.description h3,p {
				margin: 0px;
			}
			
			.description p {
				margin-left: 20px;
			}
			
			.example {
				border: 2px solid #CCC;
				border-radius: 10px 10px 10px 10px;
				-moz-border-radius: 10px 10px 10px 10px;
				-webkit-border-radius: 10px 10px 10px 10px;
				background-color: #F1F1F1;
				padding: 10px;
				margin-bottom: 10px;
			}
			
			.example h3,p {
				margin: 0px;
			}
			
			.example pre {
				color: blue;
			}
			
		</style>
	</head>
	
	</body>

		<h1>php2ajax</h1>
		<h3>Object Oriented Interface for PHP and AJAX</h3>

		<p>
			&nbsp;&nbsp;&nbsp;In order to simplify operations between ajax and PHP, I
			created the <b>php2ajax</b> class library. It's purpose
			is to provide a simple, object oriented approach, to
			using PHP and AJAX that is flexible and lightweight while still
			providing core capabilities.
		</p><br>
		
		<p>
			&nbsp;&nbsp;&nbsp;With php2ajax, once you get the request using getRequest(), it is simple
			to access your variables as though they are properties of the php2ajax object.
			As an example, if in your ajax request using jQuery you sent <b>data: "name=tom&age=25"</b>
			you could access those values using your PHP object like <b>$php2ajax->name</b> and 
			<b>$php2ajax->age</b>.
		</p>
		
		<p>
			<h2>Methods Available</h2>
			<div class="description">
				<h3>getRequest()</h3>
				<p>
					&nbsp;&nbsp;&nbsp;Checks current HTTP request for POST and GET requests. If found, 
					it will save a copy within the php2ajax object for further processing as well as set
					flags. If GET or POST is set, the <b>hasRequest</b> flag will be set to true. For each
					specific method, either the <b>hasGET</b> or <b>hasPOST</b> flags will be set to true.
				</p>
			</div>
			<div class="example">
				<h3>getRequest() Example #1</h3>
				<pre>
// Create new object
$php2ajax = new php2Ajax;

// Get request
$php2ajax->getRequest();

// Check request
if( $php2ajax->hasRequest )
{
	echo("Either a GET or POST request was made.");
}
				</pre>
			</div>
			
			<div class="description">
				<h3>filter($filters)</h3>
				<p>
					&nbsp;&nbsp;&nbsp;Allows extremly customizable filtering/sanitizing of variables passed via GET and POST. The
					$filters parameter must be an array containing names of functions to run on each variable. The
					functions can be PHP core functions such as trim(), strip_tags(), and strtoupper() or can be a custom
					function you write to do your own filtering and sanitizing. This only accepts functions which
					take a scalar variable as a parameter, process it, and then return the modified data. Therefore,
					a function which requires multiple parameters such as str_replace() will not work. In this case,
					write a custom function which calls those other functions like the example below.
				</p>
			</div>
			<div class="example">
				<h3>filter() Example #1</h3>
				<pre>	
public function myCustomFilter($data)
{
	// Call function requiring multiple parameters
	// to replace spaces with a hyphen
	return str_replace(" ", "-", $data);
}

...

// Check request
if( $php2ajax->hasRequest )
{
	// Run filters using PHP core functions and custom functions
	$php2ajax->filter( Array("trim","strtoupper","strip_tags","myCustomFilter") );
}
				</pre>
			</div>
			
			<div class="description">
				<h3>save($dataHandlerObject,$saveMethod)</h3>
				<p>
					&nbsp;&nbsp;&nbsp;The save() method allows you to pass GET/POST variables to your preferred data handling
					object or model to be saved. The first parameter must be an object instance. The second method is a string
					matching the name of a callable function within that object.
				</p>
				<p>
					Your custom data handling function must take php2ajax as a parameter  
				</p>
			</div>
			<div class="example">
				<h3>save() Example #1</h3>
				<pre>	
class MyDatabase
{
	public function insert($php2ajax)
	{
		// Insert data into database
		// function called by php2ajax::save()
	}
}
				
				
// Database object
$myDB = new MyDatabase;

// Check request
if( $php2ajax->hasRequest )
{
	// Save
	$php2ajax->save($myDB,'insert');
}
				</pre>
			</div>
			
		</p>
		
	</body>

</html>
